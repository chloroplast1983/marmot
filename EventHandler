#!/usr/local/bin/php

<?php
require './Core.php';

use PhpAmqpLib\Connection\AMQPStreamConnection;

define('EOL',(PHP_SAPI == 'cli') ? PHP_EOL : '<br />');

$core = \Marmot\Core::getInstance();
$core->initCli();

//配置信息
$url = $core::$container->get('rabbitmq.url');
$port = $core::$container->get('rabbitmq.port');
$user = $core::$container->get('rabbitmq.user');
$password = $core::$container->get('rabbitmq.password');
$queue = 'marmot';

$connection = new AMQPStreamConnection($url, $port, $user, $password);
$channel = $connection->channel();

$channel->exchange_declare('event', 'fanout', false, false, false);
list($queue_name, ,) = $channel->queue_declare($queue, false, true, false, false);
$channel->queue_bind($queue_name, 'event');


//加载事件配置文件
$eventRules = include S_ROOT.'Application/eventRules.php';

$callback = function ($msg) {

    global $eventRules, $core;
    echo ' message recived ', $msg->body, PHP_EOL;
    //处理事件
    //判断是否有对应的事件处理
    $event = explode(':', $msg->body);
    $controller = $eventRules[$event[0]][$event[2]];
    if (!empty($controller) && is_numeric($event[1])) {
        echo ' message process ', $msg->body, "\n";
        if (!$core::$container->call($controller, array('id'=>$event[1]))) {
        	echo ' messge fail handler', $msg->body, PHP_EOL;
            return false;
        }
        echo ' messge sucess handler', $msg->body, PHP_EOL;
    } else {
        echo ' messge not handler', $msg->body, PHP_EOL;
    }
  	//如果处理成功 ack
    $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
};

//一次只有接受一个消息
$channel->basic_qos(null, 1, null);
//以后使用多线程来开发,队列可以同时支持多个
$channel->basic_consume($queue_name, '', false, false, false, false, $callback);

while (count($channel->callbacks)) {
    $channel->wait();
}

$channel->close();
$connection->close();
